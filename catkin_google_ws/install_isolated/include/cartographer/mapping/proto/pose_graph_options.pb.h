// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/pose_graph_options.proto

#ifndef PROTOBUF_INCLUDED_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto
#define PROTOBUF_INCLUDED_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "cartographer/mapping/proto/pose_graph/constraint_builder_options.pb.h"
#include "cartographer/mapping/proto/pose_graph/optimization_problem_options.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto 

namespace protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto
namespace cartographer {
namespace mapping {
namespace proto {
class PoseGraphOptions;
class PoseGraphOptionsDefaultTypeInternal;
extern PoseGraphOptionsDefaultTypeInternal _PoseGraphOptions_default_instance_;
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
namespace google {
namespace protobuf {
template<> ::cartographer::mapping::proto::PoseGraphOptions* Arena::CreateMaybeMessage<::cartographer::mapping::proto::PoseGraphOptions>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace cartographer {
namespace mapping {
namespace proto {

// ===================================================================

class PoseGraphOptions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.PoseGraphOptions) */ {
 public:
  PoseGraphOptions();
  virtual ~PoseGraphOptions();

  PoseGraphOptions(const PoseGraphOptions& from);

  inline PoseGraphOptions& operator=(const PoseGraphOptions& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PoseGraphOptions(PoseGraphOptions&& from) noexcept
    : PoseGraphOptions() {
    *this = ::std::move(from);
  }

  inline PoseGraphOptions& operator=(PoseGraphOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PoseGraphOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PoseGraphOptions* internal_default_instance() {
    return reinterpret_cast<const PoseGraphOptions*>(
               &_PoseGraphOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(PoseGraphOptions* other);
  friend void swap(PoseGraphOptions& a, PoseGraphOptions& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PoseGraphOptions* New() const final {
    return CreateMaybeMessage<PoseGraphOptions>(NULL);
  }

  PoseGraphOptions* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PoseGraphOptions>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PoseGraphOptions& from);
  void MergeFrom(const PoseGraphOptions& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PoseGraphOptions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .cartographer.mapping.constraints.proto.ConstraintBuilderOptions constraint_builder_options = 3;
  bool has_constraint_builder_options() const;
  void clear_constraint_builder_options();
  static const int kConstraintBuilderOptionsFieldNumber = 3;
  private:
  const ::cartographer::mapping::constraints::proto::ConstraintBuilderOptions& _internal_constraint_builder_options() const;
  public:
  const ::cartographer::mapping::constraints::proto::ConstraintBuilderOptions& constraint_builder_options() const;
  ::cartographer::mapping::constraints::proto::ConstraintBuilderOptions* release_constraint_builder_options();
  ::cartographer::mapping::constraints::proto::ConstraintBuilderOptions* mutable_constraint_builder_options();
  void set_allocated_constraint_builder_options(::cartographer::mapping::constraints::proto::ConstraintBuilderOptions* constraint_builder_options);

  // .cartographer.mapping.optimization.proto.OptimizationProblemOptions optimization_problem_options = 4;
  bool has_optimization_problem_options() const;
  void clear_optimization_problem_options();
  static const int kOptimizationProblemOptionsFieldNumber = 4;
  private:
  const ::cartographer::mapping::optimization::proto::OptimizationProblemOptions& _internal_optimization_problem_options() const;
  public:
  const ::cartographer::mapping::optimization::proto::OptimizationProblemOptions& optimization_problem_options() const;
  ::cartographer::mapping::optimization::proto::OptimizationProblemOptions* release_optimization_problem_options();
  ::cartographer::mapping::optimization::proto::OptimizationProblemOptions* mutable_optimization_problem_options();
  void set_allocated_optimization_problem_options(::cartographer::mapping::optimization::proto::OptimizationProblemOptions* optimization_problem_options);

  // int32 optimize_every_n_nodes = 1;
  void clear_optimize_every_n_nodes();
  static const int kOptimizeEveryNNodesFieldNumber = 1;
  ::google::protobuf::int32 optimize_every_n_nodes() const;
  void set_optimize_every_n_nodes(::google::protobuf::int32 value);

  // int32 max_num_final_iterations = 6;
  void clear_max_num_final_iterations();
  static const int kMaxNumFinalIterationsFieldNumber = 6;
  ::google::protobuf::int32 max_num_final_iterations() const;
  void set_max_num_final_iterations(::google::protobuf::int32 value);

  // double global_sampling_ratio = 5;
  void clear_global_sampling_ratio();
  static const int kGlobalSamplingRatioFieldNumber = 5;
  double global_sampling_ratio() const;
  void set_global_sampling_ratio(double value);

  // double matcher_translation_weight = 7;
  void clear_matcher_translation_weight();
  static const int kMatcherTranslationWeightFieldNumber = 7;
  double matcher_translation_weight() const;
  void set_matcher_translation_weight(double value);

  // double matcher_rotation_weight = 8;
  void clear_matcher_rotation_weight();
  static const int kMatcherRotationWeightFieldNumber = 8;
  double matcher_rotation_weight() const;
  void set_matcher_rotation_weight(double value);

  // double global_constraint_search_after_n_seconds = 10;
  void clear_global_constraint_search_after_n_seconds();
  static const int kGlobalConstraintSearchAfterNSecondsFieldNumber = 10;
  double global_constraint_search_after_n_seconds() const;
  void set_global_constraint_search_after_n_seconds(double value);

  // bool log_residual_histograms = 9;
  void clear_log_residual_histograms();
  static const int kLogResidualHistogramsFieldNumber = 9;
  bool log_residual_histograms() const;
  void set_log_residual_histograms(bool value);

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.PoseGraphOptions)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::cartographer::mapping::constraints::proto::ConstraintBuilderOptions* constraint_builder_options_;
  ::cartographer::mapping::optimization::proto::OptimizationProblemOptions* optimization_problem_options_;
  ::google::protobuf::int32 optimize_every_n_nodes_;
  ::google::protobuf::int32 max_num_final_iterations_;
  double global_sampling_ratio_;
  double matcher_translation_weight_;
  double matcher_rotation_weight_;
  double global_constraint_search_after_n_seconds_;
  bool log_residual_histograms_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PoseGraphOptions

// int32 optimize_every_n_nodes = 1;
inline void PoseGraphOptions::clear_optimize_every_n_nodes() {
  optimize_every_n_nodes_ = 0;
}
inline ::google::protobuf::int32 PoseGraphOptions::optimize_every_n_nodes() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.PoseGraphOptions.optimize_every_n_nodes)
  return optimize_every_n_nodes_;
}
inline void PoseGraphOptions::set_optimize_every_n_nodes(::google::protobuf::int32 value) {
  
  optimize_every_n_nodes_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.PoseGraphOptions.optimize_every_n_nodes)
}

// .cartographer.mapping.constraints.proto.ConstraintBuilderOptions constraint_builder_options = 3;
inline bool PoseGraphOptions::has_constraint_builder_options() const {
  return this != internal_default_instance() && constraint_builder_options_ != NULL;
}
inline const ::cartographer::mapping::constraints::proto::ConstraintBuilderOptions& PoseGraphOptions::_internal_constraint_builder_options() const {
  return *constraint_builder_options_;
}
inline const ::cartographer::mapping::constraints::proto::ConstraintBuilderOptions& PoseGraphOptions::constraint_builder_options() const {
  const ::cartographer::mapping::constraints::proto::ConstraintBuilderOptions* p = constraint_builder_options_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.PoseGraphOptions.constraint_builder_options)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::mapping::constraints::proto::ConstraintBuilderOptions*>(
      &::cartographer::mapping::constraints::proto::_ConstraintBuilderOptions_default_instance_);
}
inline ::cartographer::mapping::constraints::proto::ConstraintBuilderOptions* PoseGraphOptions::release_constraint_builder_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.PoseGraphOptions.constraint_builder_options)
  
  ::cartographer::mapping::constraints::proto::ConstraintBuilderOptions* temp = constraint_builder_options_;
  constraint_builder_options_ = NULL;
  return temp;
}
inline ::cartographer::mapping::constraints::proto::ConstraintBuilderOptions* PoseGraphOptions::mutable_constraint_builder_options() {
  
  if (constraint_builder_options_ == NULL) {
    auto* p = CreateMaybeMessage<::cartographer::mapping::constraints::proto::ConstraintBuilderOptions>(GetArenaNoVirtual());
    constraint_builder_options_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.PoseGraphOptions.constraint_builder_options)
  return constraint_builder_options_;
}
inline void PoseGraphOptions::set_allocated_constraint_builder_options(::cartographer::mapping::constraints::proto::ConstraintBuilderOptions* constraint_builder_options) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(constraint_builder_options_);
  }
  if (constraint_builder_options) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      constraint_builder_options = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, constraint_builder_options, submessage_arena);
    }
    
  } else {
    
  }
  constraint_builder_options_ = constraint_builder_options;
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.PoseGraphOptions.constraint_builder_options)
}

// double matcher_translation_weight = 7;
inline void PoseGraphOptions::clear_matcher_translation_weight() {
  matcher_translation_weight_ = 0;
}
inline double PoseGraphOptions::matcher_translation_weight() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.PoseGraphOptions.matcher_translation_weight)
  return matcher_translation_weight_;
}
inline void PoseGraphOptions::set_matcher_translation_weight(double value) {
  
  matcher_translation_weight_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.PoseGraphOptions.matcher_translation_weight)
}

// double matcher_rotation_weight = 8;
inline void PoseGraphOptions::clear_matcher_rotation_weight() {
  matcher_rotation_weight_ = 0;
}
inline double PoseGraphOptions::matcher_rotation_weight() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.PoseGraphOptions.matcher_rotation_weight)
  return matcher_rotation_weight_;
}
inline void PoseGraphOptions::set_matcher_rotation_weight(double value) {
  
  matcher_rotation_weight_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.PoseGraphOptions.matcher_rotation_weight)
}

// .cartographer.mapping.optimization.proto.OptimizationProblemOptions optimization_problem_options = 4;
inline bool PoseGraphOptions::has_optimization_problem_options() const {
  return this != internal_default_instance() && optimization_problem_options_ != NULL;
}
inline const ::cartographer::mapping::optimization::proto::OptimizationProblemOptions& PoseGraphOptions::_internal_optimization_problem_options() const {
  return *optimization_problem_options_;
}
inline const ::cartographer::mapping::optimization::proto::OptimizationProblemOptions& PoseGraphOptions::optimization_problem_options() const {
  const ::cartographer::mapping::optimization::proto::OptimizationProblemOptions* p = optimization_problem_options_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.PoseGraphOptions.optimization_problem_options)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::mapping::optimization::proto::OptimizationProblemOptions*>(
      &::cartographer::mapping::optimization::proto::_OptimizationProblemOptions_default_instance_);
}
inline ::cartographer::mapping::optimization::proto::OptimizationProblemOptions* PoseGraphOptions::release_optimization_problem_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.PoseGraphOptions.optimization_problem_options)
  
  ::cartographer::mapping::optimization::proto::OptimizationProblemOptions* temp = optimization_problem_options_;
  optimization_problem_options_ = NULL;
  return temp;
}
inline ::cartographer::mapping::optimization::proto::OptimizationProblemOptions* PoseGraphOptions::mutable_optimization_problem_options() {
  
  if (optimization_problem_options_ == NULL) {
    auto* p = CreateMaybeMessage<::cartographer::mapping::optimization::proto::OptimizationProblemOptions>(GetArenaNoVirtual());
    optimization_problem_options_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.PoseGraphOptions.optimization_problem_options)
  return optimization_problem_options_;
}
inline void PoseGraphOptions::set_allocated_optimization_problem_options(::cartographer::mapping::optimization::proto::OptimizationProblemOptions* optimization_problem_options) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(optimization_problem_options_);
  }
  if (optimization_problem_options) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      optimization_problem_options = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, optimization_problem_options, submessage_arena);
    }
    
  } else {
    
  }
  optimization_problem_options_ = optimization_problem_options;
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.PoseGraphOptions.optimization_problem_options)
}

// int32 max_num_final_iterations = 6;
inline void PoseGraphOptions::clear_max_num_final_iterations() {
  max_num_final_iterations_ = 0;
}
inline ::google::protobuf::int32 PoseGraphOptions::max_num_final_iterations() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.PoseGraphOptions.max_num_final_iterations)
  return max_num_final_iterations_;
}
inline void PoseGraphOptions::set_max_num_final_iterations(::google::protobuf::int32 value) {
  
  max_num_final_iterations_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.PoseGraphOptions.max_num_final_iterations)
}

// double global_sampling_ratio = 5;
inline void PoseGraphOptions::clear_global_sampling_ratio() {
  global_sampling_ratio_ = 0;
}
inline double PoseGraphOptions::global_sampling_ratio() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.PoseGraphOptions.global_sampling_ratio)
  return global_sampling_ratio_;
}
inline void PoseGraphOptions::set_global_sampling_ratio(double value) {
  
  global_sampling_ratio_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.PoseGraphOptions.global_sampling_ratio)
}

// bool log_residual_histograms = 9;
inline void PoseGraphOptions::clear_log_residual_histograms() {
  log_residual_histograms_ = false;
}
inline bool PoseGraphOptions::log_residual_histograms() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.PoseGraphOptions.log_residual_histograms)
  return log_residual_histograms_;
}
inline void PoseGraphOptions::set_log_residual_histograms(bool value) {
  
  log_residual_histograms_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.PoseGraphOptions.log_residual_histograms)
}

// double global_constraint_search_after_n_seconds = 10;
inline void PoseGraphOptions::clear_global_constraint_search_after_n_seconds() {
  global_constraint_search_after_n_seconds_ = 0;
}
inline double PoseGraphOptions::global_constraint_search_after_n_seconds() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.PoseGraphOptions.global_constraint_search_after_n_seconds)
  return global_constraint_search_after_n_seconds_;
}
inline void PoseGraphOptions::set_global_constraint_search_after_n_seconds(double value) {
  
  global_constraint_search_after_n_seconds_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.PoseGraphOptions.global_constraint_search_after_n_seconds)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mapping
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto
