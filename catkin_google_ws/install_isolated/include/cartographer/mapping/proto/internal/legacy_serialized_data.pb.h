// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/internal/legacy_serialized_data.proto

#ifndef PROTOBUF_INCLUDED_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fserialized_5fdata_2eproto
#define PROTOBUF_INCLUDED_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fserialized_5fdata_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "cartographer/mapping/proto/serialization.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fserialized_5fdata_2eproto 

namespace protobuf_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fserialized_5fdata_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fserialized_5fdata_2eproto
namespace cartographer {
namespace mapping {
namespace proto {
class LegacySerializedData;
class LegacySerializedDataDefaultTypeInternal;
extern LegacySerializedDataDefaultTypeInternal _LegacySerializedData_default_instance_;
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
namespace google {
namespace protobuf {
template<> ::cartographer::mapping::proto::LegacySerializedData* Arena::CreateMaybeMessage<::cartographer::mapping::proto::LegacySerializedData>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace cartographer {
namespace mapping {
namespace proto {

// ===================================================================

class LegacySerializedData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.LegacySerializedData) */ {
 public:
  LegacySerializedData();
  virtual ~LegacySerializedData();

  LegacySerializedData(const LegacySerializedData& from);

  inline LegacySerializedData& operator=(const LegacySerializedData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LegacySerializedData(LegacySerializedData&& from) noexcept
    : LegacySerializedData() {
    *this = ::std::move(from);
  }

  inline LegacySerializedData& operator=(LegacySerializedData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LegacySerializedData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LegacySerializedData* internal_default_instance() {
    return reinterpret_cast<const LegacySerializedData*>(
               &_LegacySerializedData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(LegacySerializedData* other);
  friend void swap(LegacySerializedData& a, LegacySerializedData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LegacySerializedData* New() const final {
    return CreateMaybeMessage<LegacySerializedData>(NULL);
  }

  LegacySerializedData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LegacySerializedData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LegacySerializedData& from);
  void MergeFrom(const LegacySerializedData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LegacySerializedData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .cartographer.mapping.proto.Submap submap = 1;
  bool has_submap() const;
  void clear_submap();
  static const int kSubmapFieldNumber = 1;
  private:
  const ::cartographer::mapping::proto::Submap& _internal_submap() const;
  public:
  const ::cartographer::mapping::proto::Submap& submap() const;
  ::cartographer::mapping::proto::Submap* release_submap();
  ::cartographer::mapping::proto::Submap* mutable_submap();
  void set_allocated_submap(::cartographer::mapping::proto::Submap* submap);

  // .cartographer.mapping.proto.Node node = 2;
  bool has_node() const;
  void clear_node();
  static const int kNodeFieldNumber = 2;
  private:
  const ::cartographer::mapping::proto::Node& _internal_node() const;
  public:
  const ::cartographer::mapping::proto::Node& node() const;
  ::cartographer::mapping::proto::Node* release_node();
  ::cartographer::mapping::proto::Node* mutable_node();
  void set_allocated_node(::cartographer::mapping::proto::Node* node);

  // .cartographer.mapping.proto.ImuData imu_data = 3;
  bool has_imu_data() const;
  void clear_imu_data();
  static const int kImuDataFieldNumber = 3;
  private:
  const ::cartographer::mapping::proto::ImuData& _internal_imu_data() const;
  public:
  const ::cartographer::mapping::proto::ImuData& imu_data() const;
  ::cartographer::mapping::proto::ImuData* release_imu_data();
  ::cartographer::mapping::proto::ImuData* mutable_imu_data();
  void set_allocated_imu_data(::cartographer::mapping::proto::ImuData* imu_data);

  // .cartographer.mapping.proto.OdometryData odometry_data = 4;
  bool has_odometry_data() const;
  void clear_odometry_data();
  static const int kOdometryDataFieldNumber = 4;
  private:
  const ::cartographer::mapping::proto::OdometryData& _internal_odometry_data() const;
  public:
  const ::cartographer::mapping::proto::OdometryData& odometry_data() const;
  ::cartographer::mapping::proto::OdometryData* release_odometry_data();
  ::cartographer::mapping::proto::OdometryData* mutable_odometry_data();
  void set_allocated_odometry_data(::cartographer::mapping::proto::OdometryData* odometry_data);

  // .cartographer.mapping.proto.FixedFramePoseData fixed_frame_pose_data = 5;
  bool has_fixed_frame_pose_data() const;
  void clear_fixed_frame_pose_data();
  static const int kFixedFramePoseDataFieldNumber = 5;
  private:
  const ::cartographer::mapping::proto::FixedFramePoseData& _internal_fixed_frame_pose_data() const;
  public:
  const ::cartographer::mapping::proto::FixedFramePoseData& fixed_frame_pose_data() const;
  ::cartographer::mapping::proto::FixedFramePoseData* release_fixed_frame_pose_data();
  ::cartographer::mapping::proto::FixedFramePoseData* mutable_fixed_frame_pose_data();
  void set_allocated_fixed_frame_pose_data(::cartographer::mapping::proto::FixedFramePoseData* fixed_frame_pose_data);

  // .cartographer.mapping.proto.TrajectoryData trajectory_data = 6;
  bool has_trajectory_data() const;
  void clear_trajectory_data();
  static const int kTrajectoryDataFieldNumber = 6;
  private:
  const ::cartographer::mapping::proto::TrajectoryData& _internal_trajectory_data() const;
  public:
  const ::cartographer::mapping::proto::TrajectoryData& trajectory_data() const;
  ::cartographer::mapping::proto::TrajectoryData* release_trajectory_data();
  ::cartographer::mapping::proto::TrajectoryData* mutable_trajectory_data();
  void set_allocated_trajectory_data(::cartographer::mapping::proto::TrajectoryData* trajectory_data);

  // .cartographer.mapping.proto.LandmarkData landmark_data = 7;
  bool has_landmark_data() const;
  void clear_landmark_data();
  static const int kLandmarkDataFieldNumber = 7;
  private:
  const ::cartographer::mapping::proto::LandmarkData& _internal_landmark_data() const;
  public:
  const ::cartographer::mapping::proto::LandmarkData& landmark_data() const;
  ::cartographer::mapping::proto::LandmarkData* release_landmark_data();
  ::cartographer::mapping::proto::LandmarkData* mutable_landmark_data();
  void set_allocated_landmark_data(::cartographer::mapping::proto::LandmarkData* landmark_data);

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.LegacySerializedData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::cartographer::mapping::proto::Submap* submap_;
  ::cartographer::mapping::proto::Node* node_;
  ::cartographer::mapping::proto::ImuData* imu_data_;
  ::cartographer::mapping::proto::OdometryData* odometry_data_;
  ::cartographer::mapping::proto::FixedFramePoseData* fixed_frame_pose_data_;
  ::cartographer::mapping::proto::TrajectoryData* trajectory_data_;
  ::cartographer::mapping::proto::LandmarkData* landmark_data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fserialized_5fdata_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LegacySerializedData

// .cartographer.mapping.proto.Submap submap = 1;
inline bool LegacySerializedData::has_submap() const {
  return this != internal_default_instance() && submap_ != NULL;
}
inline const ::cartographer::mapping::proto::Submap& LegacySerializedData::_internal_submap() const {
  return *submap_;
}
inline const ::cartographer::mapping::proto::Submap& LegacySerializedData::submap() const {
  const ::cartographer::mapping::proto::Submap* p = submap_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LegacySerializedData.submap)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::mapping::proto::Submap*>(
      &::cartographer::mapping::proto::_Submap_default_instance_);
}
inline ::cartographer::mapping::proto::Submap* LegacySerializedData::release_submap() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.LegacySerializedData.submap)
  
  ::cartographer::mapping::proto::Submap* temp = submap_;
  submap_ = NULL;
  return temp;
}
inline ::cartographer::mapping::proto::Submap* LegacySerializedData::mutable_submap() {
  
  if (submap_ == NULL) {
    auto* p = CreateMaybeMessage<::cartographer::mapping::proto::Submap>(GetArenaNoVirtual());
    submap_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.LegacySerializedData.submap)
  return submap_;
}
inline void LegacySerializedData::set_allocated_submap(::cartographer::mapping::proto::Submap* submap) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(submap_);
  }
  if (submap) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      submap = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, submap, submessage_arena);
    }
    
  } else {
    
  }
  submap_ = submap;
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.LegacySerializedData.submap)
}

// .cartographer.mapping.proto.Node node = 2;
inline bool LegacySerializedData::has_node() const {
  return this != internal_default_instance() && node_ != NULL;
}
inline const ::cartographer::mapping::proto::Node& LegacySerializedData::_internal_node() const {
  return *node_;
}
inline const ::cartographer::mapping::proto::Node& LegacySerializedData::node() const {
  const ::cartographer::mapping::proto::Node* p = node_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LegacySerializedData.node)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::mapping::proto::Node*>(
      &::cartographer::mapping::proto::_Node_default_instance_);
}
inline ::cartographer::mapping::proto::Node* LegacySerializedData::release_node() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.LegacySerializedData.node)
  
  ::cartographer::mapping::proto::Node* temp = node_;
  node_ = NULL;
  return temp;
}
inline ::cartographer::mapping::proto::Node* LegacySerializedData::mutable_node() {
  
  if (node_ == NULL) {
    auto* p = CreateMaybeMessage<::cartographer::mapping::proto::Node>(GetArenaNoVirtual());
    node_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.LegacySerializedData.node)
  return node_;
}
inline void LegacySerializedData::set_allocated_node(::cartographer::mapping::proto::Node* node) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(node_);
  }
  if (node) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      node = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, node, submessage_arena);
    }
    
  } else {
    
  }
  node_ = node;
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.LegacySerializedData.node)
}

// .cartographer.mapping.proto.ImuData imu_data = 3;
inline bool LegacySerializedData::has_imu_data() const {
  return this != internal_default_instance() && imu_data_ != NULL;
}
inline const ::cartographer::mapping::proto::ImuData& LegacySerializedData::_internal_imu_data() const {
  return *imu_data_;
}
inline const ::cartographer::mapping::proto::ImuData& LegacySerializedData::imu_data() const {
  const ::cartographer::mapping::proto::ImuData* p = imu_data_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LegacySerializedData.imu_data)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::mapping::proto::ImuData*>(
      &::cartographer::mapping::proto::_ImuData_default_instance_);
}
inline ::cartographer::mapping::proto::ImuData* LegacySerializedData::release_imu_data() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.LegacySerializedData.imu_data)
  
  ::cartographer::mapping::proto::ImuData* temp = imu_data_;
  imu_data_ = NULL;
  return temp;
}
inline ::cartographer::mapping::proto::ImuData* LegacySerializedData::mutable_imu_data() {
  
  if (imu_data_ == NULL) {
    auto* p = CreateMaybeMessage<::cartographer::mapping::proto::ImuData>(GetArenaNoVirtual());
    imu_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.LegacySerializedData.imu_data)
  return imu_data_;
}
inline void LegacySerializedData::set_allocated_imu_data(::cartographer::mapping::proto::ImuData* imu_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(imu_data_);
  }
  if (imu_data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      imu_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, imu_data, submessage_arena);
    }
    
  } else {
    
  }
  imu_data_ = imu_data;
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.LegacySerializedData.imu_data)
}

// .cartographer.mapping.proto.OdometryData odometry_data = 4;
inline bool LegacySerializedData::has_odometry_data() const {
  return this != internal_default_instance() && odometry_data_ != NULL;
}
inline const ::cartographer::mapping::proto::OdometryData& LegacySerializedData::_internal_odometry_data() const {
  return *odometry_data_;
}
inline const ::cartographer::mapping::proto::OdometryData& LegacySerializedData::odometry_data() const {
  const ::cartographer::mapping::proto::OdometryData* p = odometry_data_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LegacySerializedData.odometry_data)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::mapping::proto::OdometryData*>(
      &::cartographer::mapping::proto::_OdometryData_default_instance_);
}
inline ::cartographer::mapping::proto::OdometryData* LegacySerializedData::release_odometry_data() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.LegacySerializedData.odometry_data)
  
  ::cartographer::mapping::proto::OdometryData* temp = odometry_data_;
  odometry_data_ = NULL;
  return temp;
}
inline ::cartographer::mapping::proto::OdometryData* LegacySerializedData::mutable_odometry_data() {
  
  if (odometry_data_ == NULL) {
    auto* p = CreateMaybeMessage<::cartographer::mapping::proto::OdometryData>(GetArenaNoVirtual());
    odometry_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.LegacySerializedData.odometry_data)
  return odometry_data_;
}
inline void LegacySerializedData::set_allocated_odometry_data(::cartographer::mapping::proto::OdometryData* odometry_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(odometry_data_);
  }
  if (odometry_data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      odometry_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, odometry_data, submessage_arena);
    }
    
  } else {
    
  }
  odometry_data_ = odometry_data;
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.LegacySerializedData.odometry_data)
}

// .cartographer.mapping.proto.FixedFramePoseData fixed_frame_pose_data = 5;
inline bool LegacySerializedData::has_fixed_frame_pose_data() const {
  return this != internal_default_instance() && fixed_frame_pose_data_ != NULL;
}
inline const ::cartographer::mapping::proto::FixedFramePoseData& LegacySerializedData::_internal_fixed_frame_pose_data() const {
  return *fixed_frame_pose_data_;
}
inline const ::cartographer::mapping::proto::FixedFramePoseData& LegacySerializedData::fixed_frame_pose_data() const {
  const ::cartographer::mapping::proto::FixedFramePoseData* p = fixed_frame_pose_data_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LegacySerializedData.fixed_frame_pose_data)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::mapping::proto::FixedFramePoseData*>(
      &::cartographer::mapping::proto::_FixedFramePoseData_default_instance_);
}
inline ::cartographer::mapping::proto::FixedFramePoseData* LegacySerializedData::release_fixed_frame_pose_data() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.LegacySerializedData.fixed_frame_pose_data)
  
  ::cartographer::mapping::proto::FixedFramePoseData* temp = fixed_frame_pose_data_;
  fixed_frame_pose_data_ = NULL;
  return temp;
}
inline ::cartographer::mapping::proto::FixedFramePoseData* LegacySerializedData::mutable_fixed_frame_pose_data() {
  
  if (fixed_frame_pose_data_ == NULL) {
    auto* p = CreateMaybeMessage<::cartographer::mapping::proto::FixedFramePoseData>(GetArenaNoVirtual());
    fixed_frame_pose_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.LegacySerializedData.fixed_frame_pose_data)
  return fixed_frame_pose_data_;
}
inline void LegacySerializedData::set_allocated_fixed_frame_pose_data(::cartographer::mapping::proto::FixedFramePoseData* fixed_frame_pose_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(fixed_frame_pose_data_);
  }
  if (fixed_frame_pose_data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      fixed_frame_pose_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fixed_frame_pose_data, submessage_arena);
    }
    
  } else {
    
  }
  fixed_frame_pose_data_ = fixed_frame_pose_data;
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.LegacySerializedData.fixed_frame_pose_data)
}

// .cartographer.mapping.proto.TrajectoryData trajectory_data = 6;
inline bool LegacySerializedData::has_trajectory_data() const {
  return this != internal_default_instance() && trajectory_data_ != NULL;
}
inline const ::cartographer::mapping::proto::TrajectoryData& LegacySerializedData::_internal_trajectory_data() const {
  return *trajectory_data_;
}
inline const ::cartographer::mapping::proto::TrajectoryData& LegacySerializedData::trajectory_data() const {
  const ::cartographer::mapping::proto::TrajectoryData* p = trajectory_data_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LegacySerializedData.trajectory_data)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::mapping::proto::TrajectoryData*>(
      &::cartographer::mapping::proto::_TrajectoryData_default_instance_);
}
inline ::cartographer::mapping::proto::TrajectoryData* LegacySerializedData::release_trajectory_data() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.LegacySerializedData.trajectory_data)
  
  ::cartographer::mapping::proto::TrajectoryData* temp = trajectory_data_;
  trajectory_data_ = NULL;
  return temp;
}
inline ::cartographer::mapping::proto::TrajectoryData* LegacySerializedData::mutable_trajectory_data() {
  
  if (trajectory_data_ == NULL) {
    auto* p = CreateMaybeMessage<::cartographer::mapping::proto::TrajectoryData>(GetArenaNoVirtual());
    trajectory_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.LegacySerializedData.trajectory_data)
  return trajectory_data_;
}
inline void LegacySerializedData::set_allocated_trajectory_data(::cartographer::mapping::proto::TrajectoryData* trajectory_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(trajectory_data_);
  }
  if (trajectory_data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      trajectory_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, trajectory_data, submessage_arena);
    }
    
  } else {
    
  }
  trajectory_data_ = trajectory_data;
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.LegacySerializedData.trajectory_data)
}

// .cartographer.mapping.proto.LandmarkData landmark_data = 7;
inline bool LegacySerializedData::has_landmark_data() const {
  return this != internal_default_instance() && landmark_data_ != NULL;
}
inline const ::cartographer::mapping::proto::LandmarkData& LegacySerializedData::_internal_landmark_data() const {
  return *landmark_data_;
}
inline const ::cartographer::mapping::proto::LandmarkData& LegacySerializedData::landmark_data() const {
  const ::cartographer::mapping::proto::LandmarkData* p = landmark_data_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LegacySerializedData.landmark_data)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::mapping::proto::LandmarkData*>(
      &::cartographer::mapping::proto::_LandmarkData_default_instance_);
}
inline ::cartographer::mapping::proto::LandmarkData* LegacySerializedData::release_landmark_data() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.LegacySerializedData.landmark_data)
  
  ::cartographer::mapping::proto::LandmarkData* temp = landmark_data_;
  landmark_data_ = NULL;
  return temp;
}
inline ::cartographer::mapping::proto::LandmarkData* LegacySerializedData::mutable_landmark_data() {
  
  if (landmark_data_ == NULL) {
    auto* p = CreateMaybeMessage<::cartographer::mapping::proto::LandmarkData>(GetArenaNoVirtual());
    landmark_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.LegacySerializedData.landmark_data)
  return landmark_data_;
}
inline void LegacySerializedData::set_allocated_landmark_data(::cartographer::mapping::proto::LandmarkData* landmark_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(landmark_data_);
  }
  if (landmark_data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      landmark_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, landmark_data, submessage_arena);
    }
    
  } else {
    
  }
  landmark_data_ = landmark_data;
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.LegacySerializedData.landmark_data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mapping
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fserialized_5fdata_2eproto
