// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/submap_visualization.proto

#ifndef PROTOBUF_INCLUDED_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto
#define PROTOBUF_INCLUDED_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "cartographer/transform/proto/transform.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto 

namespace protobuf_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto
namespace cartographer {
namespace mapping {
namespace proto {
class SubmapList;
class SubmapListDefaultTypeInternal;
extern SubmapListDefaultTypeInternal _SubmapList_default_instance_;
class SubmapList_SubmapEntry;
class SubmapList_SubmapEntryDefaultTypeInternal;
extern SubmapList_SubmapEntryDefaultTypeInternal _SubmapList_SubmapEntry_default_instance_;
class SubmapList_TrajectorySubmapList;
class SubmapList_TrajectorySubmapListDefaultTypeInternal;
extern SubmapList_TrajectorySubmapListDefaultTypeInternal _SubmapList_TrajectorySubmapList_default_instance_;
class SubmapQuery;
class SubmapQueryDefaultTypeInternal;
extern SubmapQueryDefaultTypeInternal _SubmapQuery_default_instance_;
class SubmapQuery_Request;
class SubmapQuery_RequestDefaultTypeInternal;
extern SubmapQuery_RequestDefaultTypeInternal _SubmapQuery_Request_default_instance_;
class SubmapQuery_Response;
class SubmapQuery_ResponseDefaultTypeInternal;
extern SubmapQuery_ResponseDefaultTypeInternal _SubmapQuery_Response_default_instance_;
class SubmapQuery_Response_SubmapTexture;
class SubmapQuery_Response_SubmapTextureDefaultTypeInternal;
extern SubmapQuery_Response_SubmapTextureDefaultTypeInternal _SubmapQuery_Response_SubmapTexture_default_instance_;
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
namespace google {
namespace protobuf {
template<> ::cartographer::mapping::proto::SubmapList* Arena::CreateMaybeMessage<::cartographer::mapping::proto::SubmapList>(Arena*);
template<> ::cartographer::mapping::proto::SubmapList_SubmapEntry* Arena::CreateMaybeMessage<::cartographer::mapping::proto::SubmapList_SubmapEntry>(Arena*);
template<> ::cartographer::mapping::proto::SubmapList_TrajectorySubmapList* Arena::CreateMaybeMessage<::cartographer::mapping::proto::SubmapList_TrajectorySubmapList>(Arena*);
template<> ::cartographer::mapping::proto::SubmapQuery* Arena::CreateMaybeMessage<::cartographer::mapping::proto::SubmapQuery>(Arena*);
template<> ::cartographer::mapping::proto::SubmapQuery_Request* Arena::CreateMaybeMessage<::cartographer::mapping::proto::SubmapQuery_Request>(Arena*);
template<> ::cartographer::mapping::proto::SubmapQuery_Response* Arena::CreateMaybeMessage<::cartographer::mapping::proto::SubmapQuery_Response>(Arena*);
template<> ::cartographer::mapping::proto::SubmapQuery_Response_SubmapTexture* Arena::CreateMaybeMessage<::cartographer::mapping::proto::SubmapQuery_Response_SubmapTexture>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace cartographer {
namespace mapping {
namespace proto {

// ===================================================================

class SubmapList_SubmapEntry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.SubmapList.SubmapEntry) */ {
 public:
  SubmapList_SubmapEntry();
  virtual ~SubmapList_SubmapEntry();

  SubmapList_SubmapEntry(const SubmapList_SubmapEntry& from);

  inline SubmapList_SubmapEntry& operator=(const SubmapList_SubmapEntry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SubmapList_SubmapEntry(SubmapList_SubmapEntry&& from) noexcept
    : SubmapList_SubmapEntry() {
    *this = ::std::move(from);
  }

  inline SubmapList_SubmapEntry& operator=(SubmapList_SubmapEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SubmapList_SubmapEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubmapList_SubmapEntry* internal_default_instance() {
    return reinterpret_cast<const SubmapList_SubmapEntry*>(
               &_SubmapList_SubmapEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SubmapList_SubmapEntry* other);
  friend void swap(SubmapList_SubmapEntry& a, SubmapList_SubmapEntry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SubmapList_SubmapEntry* New() const final {
    return CreateMaybeMessage<SubmapList_SubmapEntry>(NULL);
  }

  SubmapList_SubmapEntry* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SubmapList_SubmapEntry>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SubmapList_SubmapEntry& from);
  void MergeFrom(const SubmapList_SubmapEntry& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubmapList_SubmapEntry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .cartographer.transform.proto.Rigid3d pose = 3;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 3;
  private:
  const ::cartographer::transform::proto::Rigid3d& _internal_pose() const;
  public:
  const ::cartographer::transform::proto::Rigid3d& pose() const;
  ::cartographer::transform::proto::Rigid3d* release_pose();
  ::cartographer::transform::proto::Rigid3d* mutable_pose();
  void set_allocated_pose(::cartographer::transform::proto::Rigid3d* pose);

  // int32 submap_version = 1;
  void clear_submap_version();
  static const int kSubmapVersionFieldNumber = 1;
  ::google::protobuf::int32 submap_version() const;
  void set_submap_version(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.SubmapList.SubmapEntry)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::cartographer::transform::proto::Rigid3d* pose_;
  ::google::protobuf::int32 submap_version_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SubmapList_TrajectorySubmapList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.SubmapList.TrajectorySubmapList) */ {
 public:
  SubmapList_TrajectorySubmapList();
  virtual ~SubmapList_TrajectorySubmapList();

  SubmapList_TrajectorySubmapList(const SubmapList_TrajectorySubmapList& from);

  inline SubmapList_TrajectorySubmapList& operator=(const SubmapList_TrajectorySubmapList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SubmapList_TrajectorySubmapList(SubmapList_TrajectorySubmapList&& from) noexcept
    : SubmapList_TrajectorySubmapList() {
    *this = ::std::move(from);
  }

  inline SubmapList_TrajectorySubmapList& operator=(SubmapList_TrajectorySubmapList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SubmapList_TrajectorySubmapList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubmapList_TrajectorySubmapList* internal_default_instance() {
    return reinterpret_cast<const SubmapList_TrajectorySubmapList*>(
               &_SubmapList_TrajectorySubmapList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SubmapList_TrajectorySubmapList* other);
  friend void swap(SubmapList_TrajectorySubmapList& a, SubmapList_TrajectorySubmapList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SubmapList_TrajectorySubmapList* New() const final {
    return CreateMaybeMessage<SubmapList_TrajectorySubmapList>(NULL);
  }

  SubmapList_TrajectorySubmapList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SubmapList_TrajectorySubmapList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SubmapList_TrajectorySubmapList& from);
  void MergeFrom(const SubmapList_TrajectorySubmapList& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubmapList_TrajectorySubmapList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .cartographer.mapping.proto.SubmapList.SubmapEntry submap = 1;
  int submap_size() const;
  void clear_submap();
  static const int kSubmapFieldNumber = 1;
  ::cartographer::mapping::proto::SubmapList_SubmapEntry* mutable_submap(int index);
  ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::SubmapList_SubmapEntry >*
      mutable_submap();
  const ::cartographer::mapping::proto::SubmapList_SubmapEntry& submap(int index) const;
  ::cartographer::mapping::proto::SubmapList_SubmapEntry* add_submap();
  const ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::SubmapList_SubmapEntry >&
      submap() const;

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.SubmapList.TrajectorySubmapList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::SubmapList_SubmapEntry > submap_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SubmapList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.SubmapList) */ {
 public:
  SubmapList();
  virtual ~SubmapList();

  SubmapList(const SubmapList& from);

  inline SubmapList& operator=(const SubmapList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SubmapList(SubmapList&& from) noexcept
    : SubmapList() {
    *this = ::std::move(from);
  }

  inline SubmapList& operator=(SubmapList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SubmapList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubmapList* internal_default_instance() {
    return reinterpret_cast<const SubmapList*>(
               &_SubmapList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(SubmapList* other);
  friend void swap(SubmapList& a, SubmapList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SubmapList* New() const final {
    return CreateMaybeMessage<SubmapList>(NULL);
  }

  SubmapList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SubmapList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SubmapList& from);
  void MergeFrom(const SubmapList& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubmapList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SubmapList_SubmapEntry SubmapEntry;
  typedef SubmapList_TrajectorySubmapList TrajectorySubmapList;

  // accessors -------------------------------------------------------

  // repeated .cartographer.mapping.proto.SubmapList.TrajectorySubmapList trajectory = 2;
  int trajectory_size() const;
  void clear_trajectory();
  static const int kTrajectoryFieldNumber = 2;
  ::cartographer::mapping::proto::SubmapList_TrajectorySubmapList* mutable_trajectory(int index);
  ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::SubmapList_TrajectorySubmapList >*
      mutable_trajectory();
  const ::cartographer::mapping::proto::SubmapList_TrajectorySubmapList& trajectory(int index) const;
  ::cartographer::mapping::proto::SubmapList_TrajectorySubmapList* add_trajectory();
  const ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::SubmapList_TrajectorySubmapList >&
      trajectory() const;

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.SubmapList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::SubmapList_TrajectorySubmapList > trajectory_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SubmapQuery_Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.SubmapQuery.Request) */ {
 public:
  SubmapQuery_Request();
  virtual ~SubmapQuery_Request();

  SubmapQuery_Request(const SubmapQuery_Request& from);

  inline SubmapQuery_Request& operator=(const SubmapQuery_Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SubmapQuery_Request(SubmapQuery_Request&& from) noexcept
    : SubmapQuery_Request() {
    *this = ::std::move(from);
  }

  inline SubmapQuery_Request& operator=(SubmapQuery_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SubmapQuery_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubmapQuery_Request* internal_default_instance() {
    return reinterpret_cast<const SubmapQuery_Request*>(
               &_SubmapQuery_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(SubmapQuery_Request* other);
  friend void swap(SubmapQuery_Request& a, SubmapQuery_Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SubmapQuery_Request* New() const final {
    return CreateMaybeMessage<SubmapQuery_Request>(NULL);
  }

  SubmapQuery_Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SubmapQuery_Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SubmapQuery_Request& from);
  void MergeFrom(const SubmapQuery_Request& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubmapQuery_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 submap_index = 1;
  void clear_submap_index();
  static const int kSubmapIndexFieldNumber = 1;
  ::google::protobuf::int32 submap_index() const;
  void set_submap_index(::google::protobuf::int32 value);

  // int32 trajectory_id = 2;
  void clear_trajectory_id();
  static const int kTrajectoryIdFieldNumber = 2;
  ::google::protobuf::int32 trajectory_id() const;
  void set_trajectory_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.SubmapQuery.Request)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 submap_index_;
  ::google::protobuf::int32 trajectory_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SubmapQuery_Response_SubmapTexture : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture) */ {
 public:
  SubmapQuery_Response_SubmapTexture();
  virtual ~SubmapQuery_Response_SubmapTexture();

  SubmapQuery_Response_SubmapTexture(const SubmapQuery_Response_SubmapTexture& from);

  inline SubmapQuery_Response_SubmapTexture& operator=(const SubmapQuery_Response_SubmapTexture& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SubmapQuery_Response_SubmapTexture(SubmapQuery_Response_SubmapTexture&& from) noexcept
    : SubmapQuery_Response_SubmapTexture() {
    *this = ::std::move(from);
  }

  inline SubmapQuery_Response_SubmapTexture& operator=(SubmapQuery_Response_SubmapTexture&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SubmapQuery_Response_SubmapTexture& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubmapQuery_Response_SubmapTexture* internal_default_instance() {
    return reinterpret_cast<const SubmapQuery_Response_SubmapTexture*>(
               &_SubmapQuery_Response_SubmapTexture_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(SubmapQuery_Response_SubmapTexture* other);
  friend void swap(SubmapQuery_Response_SubmapTexture& a, SubmapQuery_Response_SubmapTexture& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SubmapQuery_Response_SubmapTexture* New() const final {
    return CreateMaybeMessage<SubmapQuery_Response_SubmapTexture>(NULL);
  }

  SubmapQuery_Response_SubmapTexture* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SubmapQuery_Response_SubmapTexture>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SubmapQuery_Response_SubmapTexture& from);
  void MergeFrom(const SubmapQuery_Response_SubmapTexture& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubmapQuery_Response_SubmapTexture* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes cells = 1;
  void clear_cells();
  static const int kCellsFieldNumber = 1;
  const ::std::string& cells() const;
  void set_cells(const ::std::string& value);
  #if LANG_CXX11
  void set_cells(::std::string&& value);
  #endif
  void set_cells(const char* value);
  void set_cells(const void* value, size_t size);
  ::std::string* mutable_cells();
  ::std::string* release_cells();
  void set_allocated_cells(::std::string* cells);

  // .cartographer.transform.proto.Rigid3d slice_pose = 5;
  bool has_slice_pose() const;
  void clear_slice_pose();
  static const int kSlicePoseFieldNumber = 5;
  private:
  const ::cartographer::transform::proto::Rigid3d& _internal_slice_pose() const;
  public:
  const ::cartographer::transform::proto::Rigid3d& slice_pose() const;
  ::cartographer::transform::proto::Rigid3d* release_slice_pose();
  ::cartographer::transform::proto::Rigid3d* mutable_slice_pose();
  void set_allocated_slice_pose(::cartographer::transform::proto::Rigid3d* slice_pose);

  // int32 width = 2;
  void clear_width();
  static const int kWidthFieldNumber = 2;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // int32 height = 3;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // double resolution = 4;
  void clear_resolution();
  static const int kResolutionFieldNumber = 4;
  double resolution() const;
  void set_resolution(double value);

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr cells_;
  ::cartographer::transform::proto::Rigid3d* slice_pose_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  double resolution_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SubmapQuery_Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.SubmapQuery.Response) */ {
 public:
  SubmapQuery_Response();
  virtual ~SubmapQuery_Response();

  SubmapQuery_Response(const SubmapQuery_Response& from);

  inline SubmapQuery_Response& operator=(const SubmapQuery_Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SubmapQuery_Response(SubmapQuery_Response&& from) noexcept
    : SubmapQuery_Response() {
    *this = ::std::move(from);
  }

  inline SubmapQuery_Response& operator=(SubmapQuery_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SubmapQuery_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubmapQuery_Response* internal_default_instance() {
    return reinterpret_cast<const SubmapQuery_Response*>(
               &_SubmapQuery_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(SubmapQuery_Response* other);
  friend void swap(SubmapQuery_Response& a, SubmapQuery_Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SubmapQuery_Response* New() const final {
    return CreateMaybeMessage<SubmapQuery_Response>(NULL);
  }

  SubmapQuery_Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SubmapQuery_Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SubmapQuery_Response& from);
  void MergeFrom(const SubmapQuery_Response& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubmapQuery_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SubmapQuery_Response_SubmapTexture SubmapTexture;

  // accessors -------------------------------------------------------

  // repeated .cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture textures = 10;
  int textures_size() const;
  void clear_textures();
  static const int kTexturesFieldNumber = 10;
  ::cartographer::mapping::proto::SubmapQuery_Response_SubmapTexture* mutable_textures(int index);
  ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::SubmapQuery_Response_SubmapTexture >*
      mutable_textures();
  const ::cartographer::mapping::proto::SubmapQuery_Response_SubmapTexture& textures(int index) const;
  ::cartographer::mapping::proto::SubmapQuery_Response_SubmapTexture* add_textures();
  const ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::SubmapQuery_Response_SubmapTexture >&
      textures() const;

  // string error_message = 8;
  void clear_error_message();
  static const int kErrorMessageFieldNumber = 8;
  const ::std::string& error_message() const;
  void set_error_message(const ::std::string& value);
  #if LANG_CXX11
  void set_error_message(::std::string&& value);
  #endif
  void set_error_message(const char* value);
  void set_error_message(const char* value, size_t size);
  ::std::string* mutable_error_message();
  ::std::string* release_error_message();
  void set_allocated_error_message(::std::string* error_message);

  // int32 submap_version = 2;
  void clear_submap_version();
  static const int kSubmapVersionFieldNumber = 2;
  ::google::protobuf::int32 submap_version() const;
  void set_submap_version(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.SubmapQuery.Response)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::SubmapQuery_Response_SubmapTexture > textures_;
  ::google::protobuf::internal::ArenaStringPtr error_message_;
  ::google::protobuf::int32 submap_version_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SubmapQuery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.SubmapQuery) */ {
 public:
  SubmapQuery();
  virtual ~SubmapQuery();

  SubmapQuery(const SubmapQuery& from);

  inline SubmapQuery& operator=(const SubmapQuery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SubmapQuery(SubmapQuery&& from) noexcept
    : SubmapQuery() {
    *this = ::std::move(from);
  }

  inline SubmapQuery& operator=(SubmapQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SubmapQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubmapQuery* internal_default_instance() {
    return reinterpret_cast<const SubmapQuery*>(
               &_SubmapQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(SubmapQuery* other);
  friend void swap(SubmapQuery& a, SubmapQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SubmapQuery* New() const final {
    return CreateMaybeMessage<SubmapQuery>(NULL);
  }

  SubmapQuery* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SubmapQuery>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SubmapQuery& from);
  void MergeFrom(const SubmapQuery& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubmapQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SubmapQuery_Request Request;
  typedef SubmapQuery_Response Response;

  // accessors -------------------------------------------------------

  // .cartographer.mapping.proto.SubmapQuery.Request request = 1;
  bool has_request() const;
  void clear_request();
  static const int kRequestFieldNumber = 1;
  private:
  const ::cartographer::mapping::proto::SubmapQuery_Request& _internal_request() const;
  public:
  const ::cartographer::mapping::proto::SubmapQuery_Request& request() const;
  ::cartographer::mapping::proto::SubmapQuery_Request* release_request();
  ::cartographer::mapping::proto::SubmapQuery_Request* mutable_request();
  void set_allocated_request(::cartographer::mapping::proto::SubmapQuery_Request* request);

  // .cartographer.mapping.proto.SubmapQuery.Response response = 2;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 2;
  private:
  const ::cartographer::mapping::proto::SubmapQuery_Response& _internal_response() const;
  public:
  const ::cartographer::mapping::proto::SubmapQuery_Response& response() const;
  ::cartographer::mapping::proto::SubmapQuery_Response* release_response();
  ::cartographer::mapping::proto::SubmapQuery_Response* mutable_response();
  void set_allocated_response(::cartographer::mapping::proto::SubmapQuery_Response* response);

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.SubmapQuery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::cartographer::mapping::proto::SubmapQuery_Request* request_;
  ::cartographer::mapping::proto::SubmapQuery_Response* response_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SubmapList_SubmapEntry

// int32 submap_version = 1;
inline void SubmapList_SubmapEntry::clear_submap_version() {
  submap_version_ = 0;
}
inline ::google::protobuf::int32 SubmapList_SubmapEntry::submap_version() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SubmapList.SubmapEntry.submap_version)
  return submap_version_;
}
inline void SubmapList_SubmapEntry::set_submap_version(::google::protobuf::int32 value) {
  
  submap_version_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.SubmapList.SubmapEntry.submap_version)
}

// .cartographer.transform.proto.Rigid3d pose = 3;
inline bool SubmapList_SubmapEntry::has_pose() const {
  return this != internal_default_instance() && pose_ != NULL;
}
inline const ::cartographer::transform::proto::Rigid3d& SubmapList_SubmapEntry::_internal_pose() const {
  return *pose_;
}
inline const ::cartographer::transform::proto::Rigid3d& SubmapList_SubmapEntry::pose() const {
  const ::cartographer::transform::proto::Rigid3d* p = pose_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SubmapList.SubmapEntry.pose)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::transform::proto::Rigid3d*>(
      &::cartographer::transform::proto::_Rigid3d_default_instance_);
}
inline ::cartographer::transform::proto::Rigid3d* SubmapList_SubmapEntry::release_pose() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.SubmapList.SubmapEntry.pose)
  
  ::cartographer::transform::proto::Rigid3d* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline ::cartographer::transform::proto::Rigid3d* SubmapList_SubmapEntry::mutable_pose() {
  
  if (pose_ == NULL) {
    auto* p = CreateMaybeMessage<::cartographer::transform::proto::Rigid3d>(GetArenaNoVirtual());
    pose_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SubmapList.SubmapEntry.pose)
  return pose_;
}
inline void SubmapList_SubmapEntry::set_allocated_pose(::cartographer::transform::proto::Rigid3d* pose) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pose_);
  }
  if (pose) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pose = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.SubmapList.SubmapEntry.pose)
}

// -------------------------------------------------------------------

// SubmapList_TrajectorySubmapList

// repeated .cartographer.mapping.proto.SubmapList.SubmapEntry submap = 1;
inline int SubmapList_TrajectorySubmapList::submap_size() const {
  return submap_.size();
}
inline void SubmapList_TrajectorySubmapList::clear_submap() {
  submap_.Clear();
}
inline ::cartographer::mapping::proto::SubmapList_SubmapEntry* SubmapList_TrajectorySubmapList::mutable_submap(int index) {
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SubmapList.TrajectorySubmapList.submap)
  return submap_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::SubmapList_SubmapEntry >*
SubmapList_TrajectorySubmapList::mutable_submap() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.mapping.proto.SubmapList.TrajectorySubmapList.submap)
  return &submap_;
}
inline const ::cartographer::mapping::proto::SubmapList_SubmapEntry& SubmapList_TrajectorySubmapList::submap(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SubmapList.TrajectorySubmapList.submap)
  return submap_.Get(index);
}
inline ::cartographer::mapping::proto::SubmapList_SubmapEntry* SubmapList_TrajectorySubmapList::add_submap() {
  // @@protoc_insertion_point(field_add:cartographer.mapping.proto.SubmapList.TrajectorySubmapList.submap)
  return submap_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::SubmapList_SubmapEntry >&
SubmapList_TrajectorySubmapList::submap() const {
  // @@protoc_insertion_point(field_list:cartographer.mapping.proto.SubmapList.TrajectorySubmapList.submap)
  return submap_;
}

// -------------------------------------------------------------------

// SubmapList

// repeated .cartographer.mapping.proto.SubmapList.TrajectorySubmapList trajectory = 2;
inline int SubmapList::trajectory_size() const {
  return trajectory_.size();
}
inline void SubmapList::clear_trajectory() {
  trajectory_.Clear();
}
inline ::cartographer::mapping::proto::SubmapList_TrajectorySubmapList* SubmapList::mutable_trajectory(int index) {
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SubmapList.trajectory)
  return trajectory_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::SubmapList_TrajectorySubmapList >*
SubmapList::mutable_trajectory() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.mapping.proto.SubmapList.trajectory)
  return &trajectory_;
}
inline const ::cartographer::mapping::proto::SubmapList_TrajectorySubmapList& SubmapList::trajectory(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SubmapList.trajectory)
  return trajectory_.Get(index);
}
inline ::cartographer::mapping::proto::SubmapList_TrajectorySubmapList* SubmapList::add_trajectory() {
  // @@protoc_insertion_point(field_add:cartographer.mapping.proto.SubmapList.trajectory)
  return trajectory_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::SubmapList_TrajectorySubmapList >&
SubmapList::trajectory() const {
  // @@protoc_insertion_point(field_list:cartographer.mapping.proto.SubmapList.trajectory)
  return trajectory_;
}

// -------------------------------------------------------------------

// SubmapQuery_Request

// int32 submap_index = 1;
inline void SubmapQuery_Request::clear_submap_index() {
  submap_index_ = 0;
}
inline ::google::protobuf::int32 SubmapQuery_Request::submap_index() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SubmapQuery.Request.submap_index)
  return submap_index_;
}
inline void SubmapQuery_Request::set_submap_index(::google::protobuf::int32 value) {
  
  submap_index_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.SubmapQuery.Request.submap_index)
}

// int32 trajectory_id = 2;
inline void SubmapQuery_Request::clear_trajectory_id() {
  trajectory_id_ = 0;
}
inline ::google::protobuf::int32 SubmapQuery_Request::trajectory_id() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SubmapQuery.Request.trajectory_id)
  return trajectory_id_;
}
inline void SubmapQuery_Request::set_trajectory_id(::google::protobuf::int32 value) {
  
  trajectory_id_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.SubmapQuery.Request.trajectory_id)
}

// -------------------------------------------------------------------

// SubmapQuery_Response_SubmapTexture

// bytes cells = 1;
inline void SubmapQuery_Response_SubmapTexture::clear_cells() {
  cells_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SubmapQuery_Response_SubmapTexture::cells() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture.cells)
  return cells_.GetNoArena();
}
inline void SubmapQuery_Response_SubmapTexture::set_cells(const ::std::string& value) {
  
  cells_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture.cells)
}
#if LANG_CXX11
inline void SubmapQuery_Response_SubmapTexture::set_cells(::std::string&& value) {
  
  cells_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture.cells)
}
#endif
inline void SubmapQuery_Response_SubmapTexture::set_cells(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cells_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture.cells)
}
inline void SubmapQuery_Response_SubmapTexture::set_cells(const void* value, size_t size) {
  
  cells_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture.cells)
}
inline ::std::string* SubmapQuery_Response_SubmapTexture::mutable_cells() {
  
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture.cells)
  return cells_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SubmapQuery_Response_SubmapTexture::release_cells() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture.cells)
  
  return cells_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubmapQuery_Response_SubmapTexture::set_allocated_cells(::std::string* cells) {
  if (cells != NULL) {
    
  } else {
    
  }
  cells_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cells);
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture.cells)
}

// int32 width = 2;
inline void SubmapQuery_Response_SubmapTexture::clear_width() {
  width_ = 0;
}
inline ::google::protobuf::int32 SubmapQuery_Response_SubmapTexture::width() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture.width)
  return width_;
}
inline void SubmapQuery_Response_SubmapTexture::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture.width)
}

// int32 height = 3;
inline void SubmapQuery_Response_SubmapTexture::clear_height() {
  height_ = 0;
}
inline ::google::protobuf::int32 SubmapQuery_Response_SubmapTexture::height() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture.height)
  return height_;
}
inline void SubmapQuery_Response_SubmapTexture::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture.height)
}

// double resolution = 4;
inline void SubmapQuery_Response_SubmapTexture::clear_resolution() {
  resolution_ = 0;
}
inline double SubmapQuery_Response_SubmapTexture::resolution() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture.resolution)
  return resolution_;
}
inline void SubmapQuery_Response_SubmapTexture::set_resolution(double value) {
  
  resolution_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture.resolution)
}

// .cartographer.transform.proto.Rigid3d slice_pose = 5;
inline bool SubmapQuery_Response_SubmapTexture::has_slice_pose() const {
  return this != internal_default_instance() && slice_pose_ != NULL;
}
inline const ::cartographer::transform::proto::Rigid3d& SubmapQuery_Response_SubmapTexture::_internal_slice_pose() const {
  return *slice_pose_;
}
inline const ::cartographer::transform::proto::Rigid3d& SubmapQuery_Response_SubmapTexture::slice_pose() const {
  const ::cartographer::transform::proto::Rigid3d* p = slice_pose_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture.slice_pose)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::transform::proto::Rigid3d*>(
      &::cartographer::transform::proto::_Rigid3d_default_instance_);
}
inline ::cartographer::transform::proto::Rigid3d* SubmapQuery_Response_SubmapTexture::release_slice_pose() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture.slice_pose)
  
  ::cartographer::transform::proto::Rigid3d* temp = slice_pose_;
  slice_pose_ = NULL;
  return temp;
}
inline ::cartographer::transform::proto::Rigid3d* SubmapQuery_Response_SubmapTexture::mutable_slice_pose() {
  
  if (slice_pose_ == NULL) {
    auto* p = CreateMaybeMessage<::cartographer::transform::proto::Rigid3d>(GetArenaNoVirtual());
    slice_pose_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture.slice_pose)
  return slice_pose_;
}
inline void SubmapQuery_Response_SubmapTexture::set_allocated_slice_pose(::cartographer::transform::proto::Rigid3d* slice_pose) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(slice_pose_);
  }
  if (slice_pose) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      slice_pose = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, slice_pose, submessage_arena);
    }
    
  } else {
    
  }
  slice_pose_ = slice_pose;
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture.slice_pose)
}

// -------------------------------------------------------------------

// SubmapQuery_Response

// int32 submap_version = 2;
inline void SubmapQuery_Response::clear_submap_version() {
  submap_version_ = 0;
}
inline ::google::protobuf::int32 SubmapQuery_Response::submap_version() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SubmapQuery.Response.submap_version)
  return submap_version_;
}
inline void SubmapQuery_Response::set_submap_version(::google::protobuf::int32 value) {
  
  submap_version_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.SubmapQuery.Response.submap_version)
}

// repeated .cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture textures = 10;
inline int SubmapQuery_Response::textures_size() const {
  return textures_.size();
}
inline void SubmapQuery_Response::clear_textures() {
  textures_.Clear();
}
inline ::cartographer::mapping::proto::SubmapQuery_Response_SubmapTexture* SubmapQuery_Response::mutable_textures(int index) {
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SubmapQuery.Response.textures)
  return textures_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::SubmapQuery_Response_SubmapTexture >*
SubmapQuery_Response::mutable_textures() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.mapping.proto.SubmapQuery.Response.textures)
  return &textures_;
}
inline const ::cartographer::mapping::proto::SubmapQuery_Response_SubmapTexture& SubmapQuery_Response::textures(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SubmapQuery.Response.textures)
  return textures_.Get(index);
}
inline ::cartographer::mapping::proto::SubmapQuery_Response_SubmapTexture* SubmapQuery_Response::add_textures() {
  // @@protoc_insertion_point(field_add:cartographer.mapping.proto.SubmapQuery.Response.textures)
  return textures_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::SubmapQuery_Response_SubmapTexture >&
SubmapQuery_Response::textures() const {
  // @@protoc_insertion_point(field_list:cartographer.mapping.proto.SubmapQuery.Response.textures)
  return textures_;
}

// string error_message = 8;
inline void SubmapQuery_Response::clear_error_message() {
  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SubmapQuery_Response::error_message() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SubmapQuery.Response.error_message)
  return error_message_.GetNoArena();
}
inline void SubmapQuery_Response::set_error_message(const ::std::string& value) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.SubmapQuery.Response.error_message)
}
#if LANG_CXX11
inline void SubmapQuery_Response::set_error_message(::std::string&& value) {
  
  error_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cartographer.mapping.proto.SubmapQuery.Response.error_message)
}
#endif
inline void SubmapQuery_Response::set_error_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cartographer.mapping.proto.SubmapQuery.Response.error_message)
}
inline void SubmapQuery_Response::set_error_message(const char* value, size_t size) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cartographer.mapping.proto.SubmapQuery.Response.error_message)
}
inline ::std::string* SubmapQuery_Response::mutable_error_message() {
  
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SubmapQuery.Response.error_message)
  return error_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SubmapQuery_Response::release_error_message() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.SubmapQuery.Response.error_message)
  
  return error_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubmapQuery_Response::set_allocated_error_message(::std::string* error_message) {
  if (error_message != NULL) {
    
  } else {
    
  }
  error_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message);
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.SubmapQuery.Response.error_message)
}

// -------------------------------------------------------------------

// SubmapQuery

// .cartographer.mapping.proto.SubmapQuery.Request request = 1;
inline bool SubmapQuery::has_request() const {
  return this != internal_default_instance() && request_ != NULL;
}
inline void SubmapQuery::clear_request() {
  if (GetArenaNoVirtual() == NULL && request_ != NULL) {
    delete request_;
  }
  request_ = NULL;
}
inline const ::cartographer::mapping::proto::SubmapQuery_Request& SubmapQuery::_internal_request() const {
  return *request_;
}
inline const ::cartographer::mapping::proto::SubmapQuery_Request& SubmapQuery::request() const {
  const ::cartographer::mapping::proto::SubmapQuery_Request* p = request_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SubmapQuery.request)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::mapping::proto::SubmapQuery_Request*>(
      &::cartographer::mapping::proto::_SubmapQuery_Request_default_instance_);
}
inline ::cartographer::mapping::proto::SubmapQuery_Request* SubmapQuery::release_request() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.SubmapQuery.request)
  
  ::cartographer::mapping::proto::SubmapQuery_Request* temp = request_;
  request_ = NULL;
  return temp;
}
inline ::cartographer::mapping::proto::SubmapQuery_Request* SubmapQuery::mutable_request() {
  
  if (request_ == NULL) {
    auto* p = CreateMaybeMessage<::cartographer::mapping::proto::SubmapQuery_Request>(GetArenaNoVirtual());
    request_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SubmapQuery.request)
  return request_;
}
inline void SubmapQuery::set_allocated_request(::cartographer::mapping::proto::SubmapQuery_Request* request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete request_;
  }
  if (request) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      request = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, request, submessage_arena);
    }
    
  } else {
    
  }
  request_ = request;
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.SubmapQuery.request)
}

// .cartographer.mapping.proto.SubmapQuery.Response response = 2;
inline bool SubmapQuery::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void SubmapQuery::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
}
inline const ::cartographer::mapping::proto::SubmapQuery_Response& SubmapQuery::_internal_response() const {
  return *response_;
}
inline const ::cartographer::mapping::proto::SubmapQuery_Response& SubmapQuery::response() const {
  const ::cartographer::mapping::proto::SubmapQuery_Response* p = response_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SubmapQuery.response)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::mapping::proto::SubmapQuery_Response*>(
      &::cartographer::mapping::proto::_SubmapQuery_Response_default_instance_);
}
inline ::cartographer::mapping::proto::SubmapQuery_Response* SubmapQuery::release_response() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.SubmapQuery.response)
  
  ::cartographer::mapping::proto::SubmapQuery_Response* temp = response_;
  response_ = NULL;
  return temp;
}
inline ::cartographer::mapping::proto::SubmapQuery_Response* SubmapQuery::mutable_response() {
  
  if (response_ == NULL) {
    auto* p = CreateMaybeMessage<::cartographer::mapping::proto::SubmapQuery_Response>(GetArenaNoVirtual());
    response_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SubmapQuery.response)
  return response_;
}
inline void SubmapQuery::set_allocated_response(::cartographer::mapping::proto::SubmapQuery_Response* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      response = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.SubmapQuery.response)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mapping
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto
