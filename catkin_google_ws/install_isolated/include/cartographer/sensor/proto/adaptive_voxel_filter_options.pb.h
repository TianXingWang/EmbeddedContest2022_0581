// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/sensor/proto/adaptive_voxel_filter_options.proto

#ifndef PROTOBUF_INCLUDED_cartographer_2fsensor_2fproto_2fadaptive_5fvoxel_5ffilter_5foptions_2eproto
#define PROTOBUF_INCLUDED_cartographer_2fsensor_2fproto_2fadaptive_5fvoxel_5ffilter_5foptions_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_cartographer_2fsensor_2fproto_2fadaptive_5fvoxel_5ffilter_5foptions_2eproto 

namespace protobuf_cartographer_2fsensor_2fproto_2fadaptive_5fvoxel_5ffilter_5foptions_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_cartographer_2fsensor_2fproto_2fadaptive_5fvoxel_5ffilter_5foptions_2eproto
namespace cartographer {
namespace sensor {
namespace proto {
class AdaptiveVoxelFilterOptions;
class AdaptiveVoxelFilterOptionsDefaultTypeInternal;
extern AdaptiveVoxelFilterOptionsDefaultTypeInternal _AdaptiveVoxelFilterOptions_default_instance_;
}  // namespace proto
}  // namespace sensor
}  // namespace cartographer
namespace google {
namespace protobuf {
template<> ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* Arena::CreateMaybeMessage<::cartographer::sensor::proto::AdaptiveVoxelFilterOptions>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace cartographer {
namespace sensor {
namespace proto {

// ===================================================================

class AdaptiveVoxelFilterOptions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cartographer.sensor.proto.AdaptiveVoxelFilterOptions) */ {
 public:
  AdaptiveVoxelFilterOptions();
  virtual ~AdaptiveVoxelFilterOptions();

  AdaptiveVoxelFilterOptions(const AdaptiveVoxelFilterOptions& from);

  inline AdaptiveVoxelFilterOptions& operator=(const AdaptiveVoxelFilterOptions& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AdaptiveVoxelFilterOptions(AdaptiveVoxelFilterOptions&& from) noexcept
    : AdaptiveVoxelFilterOptions() {
    *this = ::std::move(from);
  }

  inline AdaptiveVoxelFilterOptions& operator=(AdaptiveVoxelFilterOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AdaptiveVoxelFilterOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AdaptiveVoxelFilterOptions* internal_default_instance() {
    return reinterpret_cast<const AdaptiveVoxelFilterOptions*>(
               &_AdaptiveVoxelFilterOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(AdaptiveVoxelFilterOptions* other);
  friend void swap(AdaptiveVoxelFilterOptions& a, AdaptiveVoxelFilterOptions& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AdaptiveVoxelFilterOptions* New() const final {
    return CreateMaybeMessage<AdaptiveVoxelFilterOptions>(NULL);
  }

  AdaptiveVoxelFilterOptions* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AdaptiveVoxelFilterOptions>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AdaptiveVoxelFilterOptions& from);
  void MergeFrom(const AdaptiveVoxelFilterOptions& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AdaptiveVoxelFilterOptions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float max_length = 1;
  void clear_max_length();
  static const int kMaxLengthFieldNumber = 1;
  float max_length() const;
  void set_max_length(float value);

  // float min_num_points = 2;
  void clear_min_num_points();
  static const int kMinNumPointsFieldNumber = 2;
  float min_num_points() const;
  void set_min_num_points(float value);

  // float max_range = 3;
  void clear_max_range();
  static const int kMaxRangeFieldNumber = 3;
  float max_range() const;
  void set_max_range(float value);

  // @@protoc_insertion_point(class_scope:cartographer.sensor.proto.AdaptiveVoxelFilterOptions)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float max_length_;
  float min_num_points_;
  float max_range_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cartographer_2fsensor_2fproto_2fadaptive_5fvoxel_5ffilter_5foptions_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AdaptiveVoxelFilterOptions

// float max_length = 1;
inline void AdaptiveVoxelFilterOptions::clear_max_length() {
  max_length_ = 0;
}
inline float AdaptiveVoxelFilterOptions::max_length() const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.AdaptiveVoxelFilterOptions.max_length)
  return max_length_;
}
inline void AdaptiveVoxelFilterOptions::set_max_length(float value) {
  
  max_length_ = value;
  // @@protoc_insertion_point(field_set:cartographer.sensor.proto.AdaptiveVoxelFilterOptions.max_length)
}

// float min_num_points = 2;
inline void AdaptiveVoxelFilterOptions::clear_min_num_points() {
  min_num_points_ = 0;
}
inline float AdaptiveVoxelFilterOptions::min_num_points() const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.AdaptiveVoxelFilterOptions.min_num_points)
  return min_num_points_;
}
inline void AdaptiveVoxelFilterOptions::set_min_num_points(float value) {
  
  min_num_points_ = value;
  // @@protoc_insertion_point(field_set:cartographer.sensor.proto.AdaptiveVoxelFilterOptions.min_num_points)
}

// float max_range = 3;
inline void AdaptiveVoxelFilterOptions::clear_max_range() {
  max_range_ = 0;
}
inline float AdaptiveVoxelFilterOptions::max_range() const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.AdaptiveVoxelFilterOptions.max_range)
  return max_range_;
}
inline void AdaptiveVoxelFilterOptions::set_max_range(float value) {
  
  max_range_ = value;
  // @@protoc_insertion_point(field_set:cartographer.sensor.proto.AdaptiveVoxelFilterOptions.max_range)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace sensor
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_cartographer_2fsensor_2fproto_2fadaptive_5fvoxel_5ffilter_5foptions_2eproto
