;; Auto-generated. Do not edit!


(when (boundp 'turtlebot_actions::FindFiducialGoal)
  (if (not (find-package "TURTLEBOT_ACTIONS"))
    (make-package "TURTLEBOT_ACTIONS"))
  (shadow 'FindFiducialGoal (find-package "TURTLEBOT_ACTIONS")))
(unless (find-package "TURTLEBOT_ACTIONS::FINDFIDUCIALGOAL")
  (make-package "TURTLEBOT_ACTIONS::FINDFIDUCIALGOAL"))

(in-package "ROS")
;;//! \htmlinclude FindFiducialGoal.msg.html


(intern "*CHESSBOARD*" (find-package "TURTLEBOT_ACTIONS::FINDFIDUCIALGOAL"))
(shadow '*CHESSBOARD* (find-package "TURTLEBOT_ACTIONS::FINDFIDUCIALGOAL"))
(defconstant turtlebot_actions::FindFiducialGoal::*CHESSBOARD* 1)
(intern "*CIRCLES_GRID*" (find-package "TURTLEBOT_ACTIONS::FINDFIDUCIALGOAL"))
(shadow '*CIRCLES_GRID* (find-package "TURTLEBOT_ACTIONS::FINDFIDUCIALGOAL"))
(defconstant turtlebot_actions::FindFiducialGoal::*CIRCLES_GRID* 2)
(intern "*ASYMMETRIC_CIRCLES_GRID*" (find-package "TURTLEBOT_ACTIONS::FINDFIDUCIALGOAL"))
(shadow '*ASYMMETRIC_CIRCLES_GRID* (find-package "TURTLEBOT_ACTIONS::FINDFIDUCIALGOAL"))
(defconstant turtlebot_actions::FindFiducialGoal::*ASYMMETRIC_CIRCLES_GRID* 3)
(defclass turtlebot_actions::FindFiducialGoal
  :super ros::object
  :slots (_camera_name _pattern_width _pattern_height _pattern_size _pattern_type ))

(defmethod turtlebot_actions::FindFiducialGoal
  (:init
   (&key
    ((:camera_name __camera_name) "")
    ((:pattern_width __pattern_width) 0)
    ((:pattern_height __pattern_height) 0)
    ((:pattern_size __pattern_size) 0.0)
    ((:pattern_type __pattern_type) 0)
    )
   (send-super :init)
   (setq _camera_name (string __camera_name))
   (setq _pattern_width (round __pattern_width))
   (setq _pattern_height (round __pattern_height))
   (setq _pattern_size (float __pattern_size))
   (setq _pattern_type (round __pattern_type))
   self)
  (:camera_name
   (&optional __camera_name)
   (if __camera_name (setq _camera_name __camera_name)) _camera_name)
  (:pattern_width
   (&optional __pattern_width)
   (if __pattern_width (setq _pattern_width __pattern_width)) _pattern_width)
  (:pattern_height
   (&optional __pattern_height)
   (if __pattern_height (setq _pattern_height __pattern_height)) _pattern_height)
  (:pattern_size
   (&optional __pattern_size)
   (if __pattern_size (setq _pattern_size __pattern_size)) _pattern_size)
  (:pattern_type
   (&optional __pattern_type)
   (if __pattern_type (setq _pattern_type __pattern_type)) _pattern_type)
  (:serialization-length
   ()
   (+
    ;; string _camera_name
    4 (length _camera_name)
    ;; uint8 _pattern_width
    1
    ;; uint8 _pattern_height
    1
    ;; float32 _pattern_size
    4
    ;; uint8 _pattern_type
    1
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; string _camera_name
       (write-long (length _camera_name) s) (princ _camera_name s)
     ;; uint8 _pattern_width
       (write-byte _pattern_width s)
     ;; uint8 _pattern_height
       (write-byte _pattern_height s)
     ;; float32 _pattern_size
       (sys::poke _pattern_size (send s :buffer) (send s :count) :float) (incf (stream-count s) 4)
     ;; uint8 _pattern_type
       (write-byte _pattern_type s)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; string _camera_name
     (let (n) (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4) (setq _camera_name (subseq buf ptr- (+ ptr- n))) (incf ptr- n))
   ;; uint8 _pattern_width
     (setq _pattern_width (sys::peek buf ptr- :char)) (incf ptr- 1)
   ;; uint8 _pattern_height
     (setq _pattern_height (sys::peek buf ptr- :char)) (incf ptr- 1)
   ;; float32 _pattern_size
     (setq _pattern_size (sys::peek buf ptr- :float)) (incf ptr- 4)
   ;; uint8 _pattern_type
     (setq _pattern_type (sys::peek buf ptr- :char)) (incf ptr- 1)
   ;;
   self)
  )

(setf (get turtlebot_actions::FindFiducialGoal :md5sum-) "8906385fe785bb5733551eb61968fe5b")
(setf (get turtlebot_actions::FindFiducialGoal :datatype-) "turtlebot_actions/FindFiducialGoal")
(setf (get turtlebot_actions::FindFiducialGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#goal definition
uint8   CHESSBOARD = 1
uint8   CIRCLES_GRID = 2
uint8   ASYMMETRIC_CIRCLES_GRID =3

string    camera_name       # name of the camera 
uint8     pattern_width     # number of objects across
uint8     pattern_height    # number of objects down
float32   pattern_size      # size the object pattern (square size or circle size)
uint8     pattern_type      # type of pattern (CHESSBOARD, CIRCLES_GRID, ASYMMETRIC_CIRCLES_GRID)

")



(provide :turtlebot_actions/FindFiducialGoal "8906385fe785bb5733551eb61968fe5b")


