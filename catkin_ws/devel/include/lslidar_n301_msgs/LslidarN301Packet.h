// Generated by gencpp from file lslidar_n301_msgs/LslidarN301Packet.msg
// DO NOT EDIT!


#ifndef LSLIDAR_N301_MSGS_MESSAGE_LSLIDARN301PACKET_H
#define LSLIDAR_N301_MSGS_MESSAGE_LSLIDARN301PACKET_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace lslidar_n301_msgs
{
template <class ContainerAllocator>
struct LslidarN301Packet_
{
  typedef LslidarN301Packet_<ContainerAllocator> Type;

  LslidarN301Packet_()
    : stamp()
    , data()  {
      data.assign(0);
  }
  LslidarN301Packet_(const ContainerAllocator& _alloc)
    : stamp()
    , data()  {
  (void)_alloc;
      data.assign(0);
  }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef boost::array<uint8_t, 1206>  _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::lslidar_n301_msgs::LslidarN301Packet_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lslidar_n301_msgs::LslidarN301Packet_<ContainerAllocator> const> ConstPtr;

}; // struct LslidarN301Packet_

typedef ::lslidar_n301_msgs::LslidarN301Packet_<std::allocator<void> > LslidarN301Packet;

typedef boost::shared_ptr< ::lslidar_n301_msgs::LslidarN301Packet > LslidarN301PacketPtr;
typedef boost::shared_ptr< ::lslidar_n301_msgs::LslidarN301Packet const> LslidarN301PacketConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lslidar_n301_msgs::LslidarN301Packet_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lslidar_n301_msgs::LslidarN301Packet_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace lslidar_n301_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'lslidar_n301_msgs': ['/home/z/catkin_ws/src/lslidar_n301-master/lslidar_n301-master/lslidar_n301_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::lslidar_n301_msgs::LslidarN301Packet_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lslidar_n301_msgs::LslidarN301Packet_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lslidar_n301_msgs::LslidarN301Packet_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lslidar_n301_msgs::LslidarN301Packet_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lslidar_n301_msgs::LslidarN301Packet_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lslidar_n301_msgs::LslidarN301Packet_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lslidar_n301_msgs::LslidarN301Packet_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ae4f90a23256f44e82baa08dd45c3456";
  }

  static const char* value(const ::lslidar_n301_msgs::LslidarN301Packet_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xae4f90a23256f44eULL;
  static const uint64_t static_value2 = 0x82baa08dd45c3456ULL;
};

template<class ContainerAllocator>
struct DataType< ::lslidar_n301_msgs::LslidarN301Packet_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lslidar_n301_msgs/LslidarN301Packet";
  }

  static const char* value(const ::lslidar_n301_msgs::LslidarN301Packet_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lslidar_n301_msgs::LslidarN301Packet_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Raw Leishen LIDAR packet.\n\
\n\
time stamp              # packet timestamp\n\
uint8[1206] data        # packet contents\n\
\n\
";
  }

  static const char* value(const ::lslidar_n301_msgs::LslidarN301Packet_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lslidar_n301_msgs::LslidarN301Packet_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LslidarN301Packet_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lslidar_n301_msgs::LslidarN301Packet_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lslidar_n301_msgs::LslidarN301Packet_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // LSLIDAR_N301_MSGS_MESSAGE_LSLIDARN301PACKET_H
